plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'com.google.firebase.firebase-perf'
    id 'org.jlleitschuh.gradle.ktlint'
    id 'com.google.devtools.ksp'

}

android {
    def target = 35
    buildToolsVersion = "35.0.0"
    namespace 'com.token.tokenator'
    compileSdk target

    defaultConfig {
        applicationId "com.token.tokenator"
        minSdkVersion 24
        targetSdkVersion target
        versionCode 55
        versionName "1.74"

        testInstrumentationRunner "com.token.tokenator.HiltAndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
        vectorDrawables.useSupportLibrary = true
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kapt {
        correctErrorTypes true
    }

    kotlinOptions {
        jvmTarget = '17'
    }
    lint {
        disable 'JvmStaticProvidesInObjectDetector', 'FieldSiteTargetOnQualifierAnnotation', 'ModuleCompanionObjects', 'ModuleCompanionObjectsNotInModuleParent'
    }

    buildTypes {
        release {
            buildConfigField("String", "SECRET_KEY", "\"${System.getenv('SECRET_KEY') ?: getProperty("SECRET_KEY")} \"")
            buildConfigField("String", "SALT", "\"${System.getenv('SALT') ?: getProperty("SALT")}\"")
            buildConfigField("String", "IV", "\"${System.getenv('IV') ?: getProperty("IV")}\"")
        }

        debug {
            buildConfigField("String", "SECRET_KEY", "\"${System.getenv('SECRET_KEY') ?: getProperty("SECRET_KEY")} \"")
            buildConfigField("String", "SALT", "\"${System.getenv('SALT') ?: getProperty("SALT")}\"")
            buildConfigField("String", "IV", "\"${System.getenv('IV')  ?: getProperty("IV")}\"")
        }
    }

    android.packagingOptions {
        exclude 'META-INF/*'
    }
}

ktlint {
    android = true
    ignoreFailures = false
    reporters {
        reporter "plain"
        reporter "checkstyle"
        reporter "sarif"
    }
}

tasks.getByPath("preBuild").dependsOn("ktlintFormat")

dependencies {
    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.androidx.constraintlayout

    // Lifecycle
    implementation libs.androidx.lifecycle.extensions
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.lifecycle.viewmodel.ktx

    // Room Database
    implementation libs.androidx.room.runtime
    annotationProcessor libs.androidx.room.compiler

    implementation libs.androidx.room.ktx

    // To use Kotlin Symbol Processing (KSP)
    ksp libs.androidx.room.compiler

    // optional - Test helpers
    testImplementation libs.androidx.room.testing

    // optional - Paging 3 Integration
    implementation libs.androidx.room.paging

    // Navigation
    implementation libs.androidx.navigation.fragment.ktx
    implementation libs.androidx.navigation.ui.ktx
    implementation libs.androidx.navigation.dynamic.features.fragment


    // DI
    implementation libs.hilt.android
    ksp libs.hilt.android.compiler
    ksp libs.androidx.hilt.compiler

    // Firebase
    // Import the BoM for the Firebase platform
    implementation platform(libs.firebase.bom)

    // Add the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation libs.firebase.crashlytics.ktx

    // Add the dependency for the Realtime Database library
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation libs.firebase.database.ktx

    // Add the dependency for the Firebase SDK for Google Analytics
    implementation libs.firebase.analytics.ktx

    // This dependency is downloaded from the Googleâ€™s Maven repository.
    // Make sure you also include that repository in your project's build.gradle file.
    implementation(libs.feature.delivery)

    // For Kotlin users, also import the Kotlin extensions library for Play Feature Delivery:
    implementation(libs.feature.delivery.ktx)


    // Add Performance lib
    implementation libs.firebase.perf.ktx

    // For instrumented tests.
    androidTestImplementation libs.hilt.android.testing
    // ...with Kotlin.
    kaptAndroidTest libs.hilt.android.compiler

    // Styling
    implementation libs.material

    // DataBinding & other
    implementation libs.androidx.legacy.support.v4
    implementation libs.androidx.lifecycle.viewmodel.ktx

    // Fluid Slider
    implementation libs.fluid.slider

    // Feature discovery
    implementation libs.material.tap.target.prompt

    // DataStore
    implementation libs.androidx.datastore.preferences

    // TESTING
    // Testing Navigation
    androidTestImplementation libs.androidx.navigation.testing

    // Required -- JUnit 4 framework
    testImplementation libs.junit

    // Optional -- Mockito framework
    testImplementation libs.mockito.core

    // Core library
    androidTestImplementation libs.androidx.core

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation libs.androidx.runner
    androidTestImplementation libs.androidx.rules
    androidTestImplementation libs.accessibility.test.framework
    androidTestImplementation libs.espresso.library.kotlin

    androidTestUtil libs.androidx.orchestrator
}
